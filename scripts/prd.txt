# Overview
lets try는 haime 브랜드에서 제공하는 서비스로, 사용자가 자신의 손등을 촬영한 이미지를 업로드하면, 각 손가락에 다양한 반지를 시뮬레이션하여 착용해볼 수 있는 웹 서비스입니다. 반지 종류, 색상, 위치를 선택하여 실제 착용 이미지를 미리 볼 수 있으며, 완성된 이미지는 SNS, 메신저 등으로 공유할 수 있습니다. 서버리스 구조로 개인정보(손 사진)는 저장하지 않고, 반지 이미지는 탑뷰 PNG로만 제공합니다. UI/UX 디자인은 Figma로 제공됩니다.

# Core Features
- **손등 이미지 업로드**: 사용자는 가이드 이미지를 참고하거나 직접 손등을 촬영하여 이미지를 업로드합니다. 이미지는 브라우저 내에서만 처리되며 서버에 저장되지 않습니다.
- **손가락 인식**: MediaPipe Hands 등 클라이언트 라이브러리를 활용해 손가락 위치를 인식합니다.
- **반지 시뮬레이션**: 각 손가락별로 반지 종류와 색상을 선택할 수 있으며, 탑뷰 PNG 이미지를 손가락 위치에 오버레이합니다.
- **반지 이미지 관리**: 운영자가 서버(S3, Supabase 등)에 미리 업로드한 탑뷰 PNG 이미지만 사용합니다.
- **공유 기능**: Web Share API 및 이미지 다운로드를 통해 결과 이미지를 공유할 수 있습니다. 공유용 이미지는 클라이언트에서만 임시 생성됩니다.
- **개인정보 보호**: 사용자의 손 사진은 절대 서버에 저장하지 않으며, 모든 처리는 클라이언트에서만 이루어집니다.

# User Experience
- **브랜드명:** haime
- **서비스명:** lets try
- **디자인 소스:** Figma로 제공
- **주요 사용자**: 반지 구매를 고려하는 일반 소비자, 주얼리 브랜드 마케터, 온라인 쇼핑몰 이용자
- **주요 플로우**:
    1. 서비스 접속 → 손등 촬영/업로드 → 손가락 자동 인식
    2. 손가락별 반지 선택(종류/색상) → 시뮬레이션 결과 확인
    3. 반지 재선택/적용 → 결과 이미지 공유(다운로드/공유 시트)
- **UI/UX 고려사항**:
    - 모바일 환경 최적화
    - 직관적인 반지 선택 및 적용 UI(모달/팝업)
    - 개인정보 보호 안내 및 신뢰성 강조
    - Figma 디자인을 기반으로 구현

# Technical Architecture
- **시스템 구성**:
    - 프론트엔드: Next.js(React), TypeScript, Tailwind CSS
    - 손가락 인식: MediaPipe Hands(클라이언트 라이브러리)
    - 반지 이미지: S3, Supabase 등 외부 스토리지(운영자 업로드, 클라이언트는 URL로 접근)
    - 서버/백엔드: 없음(100% 클라이언트 사이드)
- **데이터 모델**:
    - 손가락 좌표: `{ finger: 'index', x: number, y: number }[]`
    - 반지 정보: `{ finger: 'index', ringType: string, color: string, imageUrl: string }[]`
- **API/통합**:
    - 서버 API 없음, 모든 인식 및 시뮬레이션은 클라이언트에서 처리
    - 반지 이미지는 외부 스토리지 URL로만 접근
- **인프라 요구사항**:
    - Vercel 정적 배포
    - 반지 이미지 저장용 S3/Supabase 등

# Development Roadmap
- **MVP**
    1. 손등 이미지 업로드 및 가이드 제공
    2. MediaPipe Hands를 통한 손가락 인식(클라이언트)
    3. 반지 PNG 이미지 오버레이 및 손가락별 반지 선택 UI
    4. 결과 이미지 공유(다운로드, Web Share API)
    5. 개인정보 보호 고지 및 UX 개선
- **향후 개선**
    - 반지 이미지 추가/관리 UI(운영자용)
    - 다양한 손 모양/피부톤 지원
    - 반지 추천 알고리즘
    - 접근성 개선 및 다국어 지원

# Logical Dependency Chain
1. 손등 이미지 업로드 및 가이드 구현
2. 손가락 인식(클라이언트 MediaPipe Hands)
3. 반지 PNG 이미지 준비 및 외부 스토리지 업로드
4. 반지 선택 UI 및 오버레이 기능 개발
5. 결과 이미지 생성 및 공유 기능 구현
6. 개인정보 보호 안내 및 UI/UX 개선

# Risks and Mitigations
- **손가락 인식 정확도**: MediaPipe Hands 등 검증된 라이브러리 사용, 다양한 테스트로 보완
- **브라우저 호환성**: 주요 브라우저/모바일 환경에서 충분한 테스트 진행
- **개인정보 이슈**: 서버 저장 금지, 클라이언트 내 처리 원칙 고지 및 기술적 강제
- **반지 이미지 품질**: 고해상도 PNG 탑뷰 이미지 확보, 운영자 업로드 프로세스 마련

# Appendix
- MediaPipe Hands 공식 문서 및 샘플 코드
- Web Share API, Canvas 이미지 합성 예제
- 반지 PNG 이미지 샘플 목록
- Figma 디자인 파일 제공(별도 전달) 