# Task ID: 2
# Title: 손등 이미지 업로드 및 가이드 구현
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the functionality for users to upload hand images and provide a visual guide for proper hand positioning.
# Details:
1. Create an image upload component with drag-and-drop and file selection capabilities
2. Implement client-side image validation (file type, size, dimensions)
3. Add a visual guide component showing the correct hand positioning
4. Create a preview component to display the uploaded image
5. Implement responsive design for mobile optimization
6. Add privacy notice explaining that images are not stored on servers

Example code for image upload:
```tsx
const ImageUpload = () => {
  const [image, setImage] = useState<File | null>(null);
  const [preview, setPreview] = useState<string | null>(null);
  
  const handleUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      setImage(file);
      setPreview(URL.createObjectURL(file));
    }
  };
  
  return (
    <div className="upload-container">
      <div className="guide-container">
        <img src="/hand-guide.png" alt="Hand positioning guide" />
        <p>Position your hand as shown in the guide</p>
      </div>
      <input type="file" accept="image/*" onChange={handleUpload} />
      {preview && <img src={preview} alt="Preview" className="preview-image" />}
    </div>
  );
};
```

# Test Strategy:
1. Test image upload with various file types, ensuring only images are accepted
2. Verify preview functionality works correctly
3. Test responsive design on different mobile devices
4. Verify that the guide is clearly visible and helpful
5. Confirm that no image data is sent to any server (network monitoring)

# Subtasks:
## 1. 레이아웃 핵심 컴포넌트 구현 [done]
### Dependencies: None
### Description: Implement the header, footer, and main content area components according to the Figma design
### Details:
Build the foundational layout structure including the header with navigation, footer with site information, and the main content container. Ensure these components are properly structured for content flow and follow the design specifications. Use Tailwind CSS for styling and ensure proper semantic HTML elements are used.

## 2. 재사용 UI 요소 개발 [done]
### Dependencies: 2.1
### Description: Develop reusable UI components such as buttons, modals, form elements, and cards
### Details:
Create a component library of reusable UI elements that maintain consistent styling throughout the application. Include various button states (primary, secondary, disabled), modal windows with overlay effects, form inputs with validation states, and content cards. Document component props and usage examples for team reference.

## 3. 반응형 디자인 시스템 구축 [done]
### Dependencies: 2.1, 2.2
### Description: Implement a responsive design system that works across mobile, tablet, and desktop viewports
### Details:
Develop a comprehensive responsive design system using Tailwind's breakpoint utilities. Create responsive variants for all components, implement appropriate spacing scales, and ensure text remains readable at all viewport sizes. Test thoroughly on various device sizes and orientations to ensure proper layout adaptation.

## 4. 플로우용 플레이스홀더 화면 구현 [done]
### Dependencies: 2.1, 2.2, 2.3
### Description: Implement placeholder screens for the main user journey through the application
### Details:
Build skeleton screens for each step in the user flow, including landing page, authentication screens, dashboard, and feature pages. Use the previously created components to assemble these screens. Include basic navigation between screens and ensure the flow matches the intended user journey while maintaining responsive behavior across all devices.

