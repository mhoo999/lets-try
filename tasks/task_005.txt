# Task ID: 5
# Title: 반지 선택 UI 및 팝업/컬러칩 구현
# Status: pending
# Dependencies: 2, 4
# Priority: high
# Description: Implement the UI for selecting rings, including the selectring button, popup modal, and color chip selection according to the Figma design.
# Details:
1. Create a SelectRing button component that activates after hand image upload
2. Implement a modal/popup component for ring selection:
```tsx
const RingSelectionModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSelectRing: (ringId: string, colorId: string) => void;
}> = ({ isOpen, onClose, onSelectRing }) => {
  const { rings, loading } = useContext(RingContext);
  const [selectedRing, setSelectedRing] = useState<string | null>(null);
  const [selectedColor, setSelectedColor] = useState<string | null>(null);
  
  const handleRingSelect = (ringId: string) => {
    setSelectedRing(ringId);
    // Default to first color
    const ring = rings.find(r => r.id === ringId);
    if (ring && ring.availableColors.length > 0) {
      setSelectedColor(ring.availableColors[0].id);
    }
  };
  
  const handleColorSelect = (colorId: string) => {
    setSelectedColor(colorId);
  };
  
  const handleConfirm = () => {
    if (selectedRing && selectedColor) {
      onSelectRing(selectedRing, selectedColor);
      onClose();
    }
  };
  
  if (!isOpen) return null;
  
  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Select a Ring</h2>
        {loading ? (
          <p>Loading rings...</p>
        ) : (
          <>
            <div className="ring-grid">
              {rings.map(ring => (
                <div 
                  key={ring.id} 
                  className={`ring-item ${selectedRing === ring.id ? 'selected' : ''}`}
                  onClick={() => handleRingSelect(ring.id)}
                >
                  <img src={ring.imageUrl} alt={ring.name} />
                  <p>{ring.name}</p>
                </div>
              ))}
            </div>
            
            {selectedRing && (
              <div className="color-selection">
                <h3>Select Color</h3>
                <div className="color-chips">
                  {rings
                    .find(r => r.id === selectedRing)?
                    .availableColors.map(color => (
                      <div 
                        key={color.id}
                        className={`color-chip ${selectedColor === color.id ? 'selected' : ''}`}
                        style={{ backgroundColor: color.colorCode }}
                        onClick={() => handleColorSelect(color.id)}
                      />
                    ))}
                </div>
              </div>
            )}
            
            <div className="modal-actions">
              <button onClick={onClose}>Cancel</button>
              <button 
                onClick={handleConfirm}
                disabled={!selectedRing || !selectedColor}
              >
                Confirm
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};
```
3. Implement the name tag component to display selected ring name
4. Create finger pill components that can be toggled on/off
5. Implement automatic selection of thumb after initial ring selection
6. Ensure the modal automatically closes after selection
7. Style all components according to Figma design

# Test Strategy:
1. Test the modal opening and closing functionality
2. Verify that ring and color selection works correctly
3. Test the automatic thumb selection after initial ring choice
4. Verify that the name tag updates correctly
5. Test the UI on various screen sizes for responsive design
6. Conduct usability testing to ensure the flow is intuitive

# Subtasks:
## 1. 클라우드 스토리지 연동 [pending]
### Dependencies: None
### Description: Configure either AWS S3 or Supabase storage for ring images
### Details:
Research and select the appropriate storage solution (S3 or Supabase). Create necessary buckets/containers with proper access permissions. Generate and securely store API keys or credentials. Document the storage structure and access patterns for the team.
<info added on 2025-05-04T10:21:57.172Z>
Research and select the appropriate storage solution (S3 or Supabase). Create necessary buckets/containers with proper access permissions. Generate and securely store API keys or credentials. Document the storage structure and access patterns for the team.

## Supabase Storage 구현 계획

### 스토리지 서비스 선택
- Supabase Storage를 반지 이미지 저장소로 사용

### 구현 단계
1. Supabase 프로젝트 생성 및 Storage 서비스 활성화
2. 'rings' 버킷 생성 (공개 읽기 권한 설정, 업로드 권한은 인증된 사용자로 제한)
3. 반지 이미지 폴더 구조 설계 및 구현
   - 경로 형식: /rings/{ringId}/{colorId}.png
   - 모든 이미지는 탑뷰 PNG 형식으로 통일
4. 보안 및 인증
   - Supabase 서비스 키 및 익명 키 발급
   - .env 파일에 안전하게 키 저장
5. 클라이언트 연동
   - Supabase JavaScript SDK 설치
   - 환경 설정 및 초기화 코드 작성
   - 이미지 가져오기 유틸리티 함수 구현

### 작업 파일
- scripts/supabase-init.md: Supabase 설정 가이드 문서
- public/data/rings.json: 반지 메타데이터 (이미지 경로 포함)
- .env: Supabase 키 저장
- src/lib/supabase.ts: Supabase 클라이언트 유틸리티

### 참고 자료
- Supabase Storage 공식 문서: https://supabase.com/docs/guides/storage
</info added on 2025-05-04T10:21:57.172Z>

## 2. 이미지 메타데이터 스키마 정의 [pending]
### Dependencies: 5.1
### Description: Create a standardized metadata structure for ring images
### Details:
Define metadata fields (ring ID, category, material, style, dimensions, creation date, etc.). Create a JSON schema for validation. Implement naming conventions for files that reflect the metadata structure. Document the schema for team reference.

## 3. 이미지 업로드 프로세스 구현 [pending]
### Dependencies: 5.1, 5.2
### Description: Develop scripts to organize and upload ring images with proper metadata
### Details:
Create scripts to batch process images (resize, optimize, rename). Implement metadata extraction or assignment. Develop upload functionality with error handling and retry logic. Test uploads with various image types and sizes. Document the upload process.

## 4. 클라이언트 이미지 캐싱 [pending]
### Dependencies: 5.3
### Description: Develop efficient client-side image loading with proper caching
### Details:
Implement API endpoints for retrieving images based on metadata. Create client-side caching strategy (browser cache, IndexedDB, or memory cache). Implement lazy loading for image galleries. Add prefetching for anticipated user navigation. Test performance across different network conditions.

