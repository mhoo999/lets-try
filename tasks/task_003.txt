# Task ID: 3
# Title: MediaPipe Hands 손가락 인식 연동
# Status: done
# Dependencies: 2
# Priority: high
# Description: Integrate MediaPipe Hands library to detect and track finger positions on the uploaded hand image.
# Details:
1. Install MediaPipe Hands library:
```bash
npm install @mediapipe/hands @mediapipe/drawing_utils @mediapipe/camera_utils
```
2. Create a custom hook for hand detection:
```tsx
const useHandDetection = (imageElement: HTMLImageElement | null) => {
  const [fingerPositions, setFingerPositions] = useState<{finger: string, x: number, y: number}[]>([]);
  
  useEffect(() => {
    if (!imageElement) return;
    
    const hands = new Hands({
      locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`,
    });
    
    hands.setOptions({
      maxNumHands: 1,
      modelComplexity: 1,
      minDetectionConfidence: 0.5,
      minTrackingConfidence: 0.5
    });
    
    hands.onResults((results) => {
      if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {
        const landmarks = results.multiHandLandmarks[0];
        // Map MediaPipe landmarks to finger positions
        const positions = [
          { finger: 'thumb', x: landmarks[4].x, y: landmarks[4].y },
          { finger: 'index', x: landmarks[8].x, y: landmarks[8].y },
          { finger: 'middle', x: landmarks[12].x, y: landmarks[12].y },
          { finger: 'ring', x: landmarks[16].x, y: landmarks[16].y },
          { finger: 'pinky', x: landmarks[20].x, y: landmarks[20].y }
        ];
        setFingerPositions(positions);
      }
    });
    
    // Process the image
    const canvas = document.createElement('canvas');
    canvas.width = imageElement.width;
    canvas.height = imageElement.height;
    const ctx = canvas.getContext('2d');
    ctx?.drawImage(imageElement, 0, 0);
    const imageData = ctx?.getImageData(0, 0, canvas.width, canvas.height);
    
    if (imageData) {
      hands.send({image: imageData});
    }
    
    return () => {
      hands.close();
    };
  }, [imageElement]);
  
  return fingerPositions;
};
```
3. Implement visual indicators (pills) for each detected finger
4. Add error handling for cases where hand detection fails
5. Optimize for performance on mobile devices

# Test Strategy:
1. Test hand detection with various hand images and positions
2. Verify accuracy of finger position detection
3. Test with different lighting conditions and backgrounds
4. Measure and optimize performance on mobile devices
5. Create test cases for error scenarios (no hand detected, multiple hands, etc.)

# Subtasks:
## 1. 드래그&드롭/파일 선택 구현 [done]
### Dependencies: None
### Description: Create a component that allows users to upload images via drag-and-drop or traditional file selection dialog
### Details:
Build a reusable component that handles both drag-and-drop functionality and traditional file input selection. Include visual feedback for drag events (hover, drop), handle multiple file attempts appropriately, and ensure cross-browser compatibility. Implement error handling for failed uploads and provide user feedback.

## 2. 카메라 촬영 기능 추가 [done]
### Dependencies: 3.1
### Description: Implement functionality to access device camera for direct photo capture within the application
### Details:
Use the MediaDevices API to request camera access, create an interface for capturing photos directly from the camera, handle permission requests and denials gracefully, ensure mobile device compatibility, and provide fallback options when camera access isn't available or permitted.

## 3. 이미지 유효성 검사 및 처리 [done]
### Dependencies: 3.1, 3.2
### Description: Implement validation for file types, sizes, and dimensions along with basic client-side image processing
### Details:
Validate uploaded images for acceptable file types (JPEG, PNG, etc.), file size limits, and dimension requirements. Implement client-side image processing including basic resizing, compression, and orientation correction. Provide clear feedback to users when validation fails and suggest remedies.

## 4. 미리보기 및 위치 가이드 구현 [done]
### Dependencies: 3.3
### Description: Create an image preview component that shows the uploaded image with positioning guidance for users
### Details:
Develop a preview component that displays the uploaded/captured image with visual guides for proper positioning. Include features like zoom, pan, and crop functionality. Implement responsive design to ensure the preview works well across different screen sizes. Add visual indicators or overlays to help users position their images correctly.

